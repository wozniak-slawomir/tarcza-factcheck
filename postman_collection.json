{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "Next Prompcik - Text Similarity API",
		"description": "API endpoints for text similarity evaluation system using cosine similarity",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Text Posts",
			"item": [
				{
					"name": "Get All Posts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/text",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"text"
							]
						},
						"description": "Retrieve all text posts from the database"
					},
					"response": []
				},
				{
					"name": "Add Post",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"This is a sample post text that will be stored in the database\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/text",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"text"
							]
						},
						"description": "Add a new text post to the database"
					},
					"response": []
				},
				{
					"name": "Delete Post",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/text?id={{postId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"text"
							],
							"query": [
								{
									"key": "id",
									"value": "{{postId}}",
									"description": "MongoDB ObjectId of the post to delete"
								}
							]
						},
						"description": "Delete a post by its ID"
					},
					"response": []
				}
			]
		},
		{
			"name": "Evaluation",
			"item": [
				{
					"name": "Evaluate Text - Low Similarity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"This is a completely unique message with original content\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"evaluate"
							]
						},
						"description": "Evaluate text with low similarity (should return flagged: false, similarity close to 0)"
					},
					"response": []
				},
				{
					"name": "Evaluate Text - High Similarity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"This is a sample post text that will be stored in the database\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"evaluate"
							]
						},
						"description": "Evaluate text similar to existing posts (should return flagged: true if similarity > 0.5)"
					},
					"response": []
				},
				{
					"name": "Evaluate Text - Invalid Request",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"invalidField\": \"test\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"evaluate"
							]
						},
						"description": "Test invalid request (should return 400 error)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Test Workflow",
			"item": [
				{
					"name": "1. Add test post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Post added successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"This is a test post for similarity testing\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/text",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"text"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Evaluate similar text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains similarity score\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('similarity');",
									"    pm.expect(jsonData).to.have.property('flagged');",
									"    pm.expect(jsonData.similarity).to.be.within(0, 1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"This is a test post for similarity testing\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"evaluate"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Get all posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Posts array exists\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('posts');",
									"    pm.expect(jsonData.posts).to.be.an('array');",
									"});",
									"",
									"// Save first post ID for deletion",
									"var jsonData = pm.response.json();",
									"if (jsonData.posts.length > 0) {",
									"    pm.environment.set('postId', jsonData.posts[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/text",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"text"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Evaluate different text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Low similarity for different text\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.similarity).to.be.below(0.5);",
									"    pm.expect(jsonData.flagged).to.eql(false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"Completely different content about weather and nature\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/evaluate",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"evaluate"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "postId",
			"value": "",
			"type": "string"
		}
	]
}
